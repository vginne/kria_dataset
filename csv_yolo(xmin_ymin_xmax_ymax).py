
# import os

# def convert_to_yolo_format(csv_file, output_path):
#     with open(csv_file, 'r') as file:
#         lines = file.readlines()

#     data = {}
#     for line in lines:
#         values = line.strip().split(',')

#         if len(values) != 7:
#             print(f"Ignoring invalid line: {line}")
#             continue

#         image_name = values[0]
#         try:
#             plate_min_x = int(values[1])
#             #plate_max_x = int(values[2])
#             plate_max_x = int(values[1]) + int(values[3])
#             plate_min_y = int(values[2])
#             #plate_max_y = int(values[6])
#             plate_max_y = int(values[2]) + int(values[4])
#         except ValueError:
#             print(f"Ignoring invalid line: {line}")
#             continue

#         if image_name not in data:
#             data[image_name] = []

#         image_center_x = image_width / 2
#         image_center_y = image_height / 2
#         box_width = plate_max_x - plate_min_x
#         box_height = plate_max_y - plate_min_y
#         box_center_x = plate_min_x + (box_width / 2)
#         box_center_y = plate_min_y + (box_height / 2)
#         normalized_center_x = box_center_x / image_width
#         normalized_center_y = box_center_y / image_height
#         normalized_width = box_width / image_width
#         normalized_height = box_height / image_height


#         data[image_name].append((normalized_center_x, normalized_center_y, normalized_width, normalized_height))

#     for image_name, bbox_list in data.items():
#         txt_file = os.path.join(output_path, image_name.replace('.jpg', '.txt'))
#         with open(txt_file, 'w') as file:
#             for bbox in bbox_list:
#                 file.write(f"0 {bbox[0]} {bbox[1]} {bbox[2]} {bbox[3]}\n")

#         print(f"Generated {txt_file} for image {image_name}")

# # Provide the path to your CSV file
# csv_file = '/home/vginne/project1/kria_dataset_ocr/to_code.csv'

# # Set the image width and height (you need to provide these values)
# image_width = 4092
# image_height = 2052

# # Provide the path where the generated text files should be saved
# output_path = '/home/vginne/project1/kria_dataset_ocr/labels'

# convert_to_yolo_format(csv_file, output_path)


#changing the bounding box


import os

def convert_to_yolo_format(csv_file, output_path):
    with open(csv_file, 'r') as file:
        lines = file.readlines()

    data = {}
    for line in lines:
        values = line.strip().split(',')

        if len(values) != 7:
            print(f"Ignoring invalid line: {line}")
            continue

        image_name = values[0]
        try:
            # since the origianl xmin is generated by ocr by adding a value it slightly moves left side so that more information can be captured
            plate_min_x = int(values[2]) - 10.8 
            #plate_max_x = int(values[2])
            plate_max_x = int(values[2]) + int(values[4])
            plate_min_y = int(values[3]) - 5
            #plate_max_y = int(values[6])
            plate_max_y = int(values[3]) + int(values[5])
        except ValueError:
            print(f"Ignoring invalid line: {line}")
            continue

        if image_name not in data:
            data[image_name] = []

        # image_center_x = image_width / 2
        # image_center_y = image_height / 2
        # box_width = (plate_max_x - plate_min_x)
        # box_height = (plate_max_y - plate_min_y)
        # box_center_x = plate_min_x + (box_width / 2)
        # box_center_y = plate_min_y + (box_height / 2)
        # normalized_center_x = box_center_x / image_width
        # normalized_center_y = box_center_y / image_height
        # normalized_width = (box_width / image_width)
        # normalized_height = (box_height / image_height) 

        image_center_x = image_width / 2
        image_center_y = image_height / 2
        box_width = (plate_max_x - plate_min_x)
        box_height = (plate_max_y - plate_min_y)
        increase_factor = 0.09  # 15% increase
        box_width *= (1 + increase_factor)
        box_height *= (1 + increase_factor)
        box_center_x = plate_min_x + (box_width / 2)
        box_center_y = plate_min_y + (box_height / 2)
        normalized_center_x = box_center_x / image_width
        normalized_center_y = box_center_y / image_height
        normalized_width = (box_width / image_width)
        normalized_height = (box_height / image_height)

        data[image_name].append((normalized_center_x, normalized_center_y, normalized_width, normalized_height))

    for image_name, bbox_list in data.items():
        txt_file = os.path.join(output_path, image_name.replace('.jpg', '.txt'))
        with open(txt_file, 'w') as file:
            for bbox in bbox_list:
                file.write(f"0 {bbox[0]} {bbox[1]} {bbox[2]} {bbox[3]}\n")

        print(f"Generated {txt_file} for image {image_name}")

# Provide the path to your CSV file
csv_file = '/home/vginne/ocr_api_v5/api/github/api/api_test/bounding_boxes_from_andrea_ocr.csv'

# Set the image width and height (you need to provide these values)
image_width = 4096
image_height = 2048

# Provide the path where the generated text files should be saved
output_path = '/home/vginne/ocr_pre_labelling/t'

convert_to_yolo_format(csv_file, output_path)
